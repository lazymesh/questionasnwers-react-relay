schema {
  query: Query
  mutation: mutation
  subscription: subscription
}

scalar DateTime

type mutation {
  createUser(userId: Int!, name: String!): User!
  createQuestion(text: String!, answer: String!, postedBy: Int!): Question!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type Query {
  users: [User!]!
  user(userId: Int!): User
  questions: [Question!]!
  pagedquestions(first: Int!, after: String): QuestionConnection
  question(text: String!): Question
}

type Question {
  text: String!
  answer: String!
  postedBy: Int!
  createdAt: DateTime!
  user: User
}

type QuestionConnection {
  pageInfo: PageInfo!
  edges: [QuestionEdge!]!
  count: Int!
}

type QuestionEdge {
  node: Question!
  cursor: String!
}

type subscription {
  questionCreated: Question!
  userCreated: User!
}

type User {
  userId: Int!
  name: String!
  questions: [Question!]!
  lastQuestion: Question!
}

type test {
 id: ID!
}
